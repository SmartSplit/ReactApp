@model ReactApp.ViewModels.Dashboard.DashboardViewModel

@{
    Layout = "_LTELayout";
    ViewBag.Title = "Dashboard";
}
      <!-- Small boxes (Stat box) -->
@if (ViewBag.Error != true)
{
    <div class="row">
        <div class="col-lg-3 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-aqua">
                <div class="inner">
                    <h3>@Model.PaymentsCount</h3>

                    <p>Payments</p>
                </div>
                <div class="icon">
                    <i class="ion ion-bag"></i>
                </div>
                <a href="#" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>
        <!-- ./col -->
        <div class="col-lg-3 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-green">
                <div class="inner">
                    <h3>@(Model.SessionsCount)</h3>

                    <p>Sessions</p>
                </div>
                <div class="icon">
                    <i class="ion ion-stats-bars"></i>
                </div>
                <a href="@Url.Action("Index", "Sessions")" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>
        <!-- ./col -->
        <div class="col-lg-3 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-yellow">
                <div class="inner">
                    <h3>@(Model.UsersCount)</h3>

                    <p>User Registrations</p>
                </div>
                <div class="icon">
                    <i class="ion ion-person-add"></i>
                </div>
                <a href="@Url.Action("Index", "Users")" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>
        <!-- ./col -->
        <div class="col-lg-3 col-xs-6">
            <!-- small box -->
            <div class="small-box bg-red">
                <div class="inner">
                    <h3>@Model.ItemsCount</h3>

                    <p>Items</p>
                </div>
                <div class="icon">
                    <i class="ion ion-pie-graph"></i>
                </div>
                <a href="#" class="small-box-footer">More info <i class="fa fa-arrow-circle-right"></i></a>
            </div>
        </div>
        <!-- ./col -->
    </div>
    <!-- /.row -->
}
else
{
    <div class="alert alert-info">@ViewBag.ErrorMessage</div>
}

<div class="row">
    <div class="col-md-6">
        @Html.Partial("_morris_box", new ViewDataDictionary(this.ViewData) { { "name", "sessions"}, { "headerTitle", "Sessions activities in last 30 days" } })
    </div>
    <div class="col-md-6">
        @Html.Partial("_morris_box", new ViewDataDictionary(this.ViewData) { { "name", "users" }, { "headerTitle", "Users registrations in last 30 days" } })
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        @Html.Partial("_morris_box", new ViewDataDictionary(this.ViewData) { { "name", "payments" }, { "headerTitle", "Top 3 payments in last 30 days" } })
    </div>
</div>

@section Scripts {
    <script>

        $(function () {
            loadMorrisSessions();
            loadMorrisUsers();
            loadMorrisPayments();
        });

        $('body').on('click', '#refresh_morris_sessions', function () {
            loadMorrisSessions();
        });

        $('body').on('click', '#refresh_morris_users', function () {
            loadMorrisUsers();
        });

        $('body').on('click', '#refresh_morris_payments', function () {
            loadMorrisPayments();
        });

        function loadMorrisPayments()
        {
            $.ajax({
                url: '@Url.Action("LoadMorrisPayments", "Dashboard")',
                beforeSend: () => {
                    $("#overlay_morris_payments").show();
                    $("#morris_payments_error").hide();
                }
            }).done((data) => {
                morrisPayments(data);
            }).always(() => {
                $("#overlay_morris_payments").hide();
            }).fail((error) => {
                console.log(error);
                $("#morris_payments_error").show();
            });
        }

        function loadMorrisSessions()
        {
            $.ajax({
                url: '@Url.Action("LoadMorrisSessions", "Dashboard")',
                beforeSend: () => {
                    $("#overlay_morris_sessions").show();
                    $("#morris_sessions_error").hide();
                }
            }).done((data) => {
                morrisSession(data);
            }).always(() => {
                $("#overlay_morris_sessions").hide();
            }).fail((error) => {
                console.log(error);
                $("#morris_sessions_error").show();
            });
        }

        function loadMorrisUsers()
        {
            $.ajax({
                url: '@Url.Action("LoadMorrisUsers", "Users")',
                beforeSend: () => {
                    $("#overlay_morris_users").show();
                    $("#morris_users_error").hide();
                }
            }).done((data) => {
                morrisUsers(data);
            }).always(() => {
                $("#overlay_morris_users").hide();
            }).fail((error) => {
                console.log(error);
                $("#morris_users_error").show();
            });
        }

        function morrisSession(data)
        {
            var area = new Morris.Line({
                element: 'sessions-chart',
                data: data,
                xkey: 'xKey',
                ykeys: ['startedCount', 'endedCount'],
                labels: ['Sessions started', 'Session ended'],
                hideHover: 'auto',
                lineColors: ['#a0d0e0', '#3c8dbc'],
                resize: true,
            });
        }

        function morrisUsers(data)
        {
            var line = new Morris.Line({
                element: 'users-chart',
                resize: true,
                data: data,
                xkey: 'xKey',
                ykeys: ['yKey'],
                labels: ['Registered'],
                lineColors: ['#3c8dbc'],
                hideHover: 'auto'
            });
        }

        function morrisPayments(data) {
            var donut = new Morris.Donut({
                element: 'payments-chart',
                resize: true,
                data: data,
                hideHover: 'auto',
                xkey: 'xKey',
                ykeys: ['yKey'],
            });
        }
    </script>
}